from ._base_store import StoreModel
from ..store_items import *


class ComponentStore(StoreModel):
    target = "component"

    def __init__(self,
                 component_index: int = 0
                 ):
        """
        ComponentStore for selection of a given component in a visual.

        Parameters
        ----------
        component_index : int
            The index of the component selected.
        """
        super().__init__()
        self._component_index = component_index

    @property
    def component_index(self) -> int:
        """Current component index selected."""
        return self._component_index

    @component_index.setter
    def component_index(self, component_index: int) -> None:
        # check for invalid values
        # TODO: some way to keep track of the range of component possible and check for out of bounds values
        if component_index < 0:
            raise ValueError("Component index must be greater than or equal to 0.")

        # if current selected == new selected return
        if component_index == self.component_index:
            return

        # update component index
        self._component_index = component_index
        # update store

    def subscribe(self, item: StoreModelItem):
        """Add an item to the store."""
        # item validation
        super().subscribe(item=item)
        # component store relevant subscription stuff
        if isinstance(item, HeatmapItem):
            item.component_selector.add_event_handler(self.update_store, "selection")


    # if isinstance(item, ):

    def unsubscribe(self, item: StoreModelItem):
        """Remove an item from the component store."""
        super().unsubscribe(item)

        # unhook events
        if isinstance(item, HeatmapItem):
            item.time_selector.remove_event_handler(self.update_store, "selection")

    def update_store(self, ev):
        if ev.type == "selection":
            self.component_index = ev.get_selected_index()

        # if event was generated by a graphic
        # do not want to update that item
        if hasattr(ev, "graphic"):
            source = ev.graphic

            for item in self.store:
                if item == source:
                    continue
                item._set_component(self.component_index)

        for item in self.store:
            item._set_component(self.component_index)
