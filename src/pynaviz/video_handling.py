import pathlib
import threading
from typing import Optional, Tuple

import av
import numpy as np
from numpy.typing import NDArray
import time

def extract_keyframe_times_and_points(
        video_path: str | pathlib.Path, stream_index: int = 0, first_only=False
) -> Tuple[NDArray, NDArray]:
    """
    Extract the indices and timestamps of keyframes from a video file.

    This function decodes the video while skipping non-keyframes, and records:
    - The index of each keyframe in the full video frame sequence
    - The "Presentation Time Stamp" to each keyframe.

    It is typically intended to run in a background thread during
    initialization of a ``VideoHandler``, and supports optimized seeking:

    - When the requested frame (based on experimental time) is before the
      current playback position, seeking backward is necessary.

    - When the requested frame is beyond the next known keyframe, seeking
      forward to the closest keyframe is more efficient than decoding all
      intermediate frames.

    Parameters
    ----------
    video_path : str or pathlib.Path
        The path to the video file.
    stream_index:
        The index of the video stream.
    first_only:
        If true, return the first keypoint only. Used at initialization.

    Returns
    -------
    keyframe_points : NDArray[float]
        The point number of the frame.

    keyframe_timestamps : NDArray[float]
        The timestamp of the frame.
    """
    keyframe_timestamp = []
    keyframe_pts = []

    with av.open(video_path) as container:
        stream = container.streams.video[stream_index]
        stream.codec_context.skip_frame = "NONKEY"

        frame_index = 0
        for frame in container.decode(stream):
            keyframe_timestamp.append(frame.time)
            keyframe_pts.append(frame.pts)
            if first_only:
                break
            frame_index += 1

    return np.asarray(keyframe_pts), np.asarray(keyframe_timestamp,dtype=float)


def ts_to_index(ts: float, time: NDArray) -> int:
    """
    Return the index of the frame whose experimental time is just before (or equal to) `ts`.

    Parameters
    ----------
    ts : float
        Experimental timestamp to match.
    time : NDArray
        Array of experimental timestamps, assumed sorted in ascending order,
        with one entry per frame.

    Returns
    -------
    idx : int
        Index of the frame with time <= `ts`. Clipped to [0, len(time) - 1].

    Notes
    -----
    - If `ts` is smaller than all values in `time`, returns 0.
    - If `ts` is greater than all values in `time`, returns `len(time) - 1`.
    """
    idx = np.searchsorted(time, ts, side='right') - 1
    return np.clip(idx, 0, len(time) - 1)


class VideoHandler:
    """Class for getting video frames."""
    def __init__(self, video_path: str | pathlib.Path, stream_index=0,  time: Optional[NDArray]=None, flush_every=10) -> None:
        self.video_path = pathlib.Path(video_path)
        self.container = av.open(video_path)
        self.stream = self.container.streams.video[stream_index]
        self.stream_index = stream_index
        self.flush_every = 10

        # default to linspace
        if time is None:
            n_frames = self.stream.frames
            frame_duration = 1 / float(self.stream.average_rate)
            self.time = np.linspace(0, frame_duration * n_frames - frame_duration, n_frames)
        else:
            self.time = np.asarray(time)

        # initialize decoded frame last index
        # if sampling of other signals (LFP) is much denser, multiple times the frame
        # is unchanged, so cache the idx
        self.last_idx = None

        # initialize current frame
        self.current_frame = None

        if self.video_path.suffix == ".mkv":
            # mkv time is rounded to 3 digits, at least in the example video
            # generated by tests/generate_numbered_video.py
            self.round_fn = lambda x: np.round(x, 3)
        else:
            self.round_fn = lambda x: x

        # These will be initialized in the thread once n_frames is known
        self.all_pts = None
        self.all_times = None
        self.key_mask = None

        self._i = 0  # write position
        self._lock = threading.Lock()
        if self.stream.frames and self.stream.frames > 0:
            self._index_thread = threading.Thread(target=self._build_index_fixed_size, daemon=True)
        else:
            self._index_thread = threading.Thread(target=self._build_index_dynamic, daemon=True)
        self._index_thread.start()
        self._index_ready = threading.Event()

    def _build_index_fixed_size(self):
        with av.open(self.video_path) as container:
            stream = container.streams.video[self.stream_index]
            n_frames = stream.frames

            if not n_frames or n_frames <= 0:
                raise ValueError("Cannot determine total number of frames in stream.")

            self.all_pts = np.empty(n_frames, dtype=np.int64)
            self._i = 0  # Number of valid entries

            for packet in container.demux(stream):
                for frame in packet.decode():
                    if self._i >= n_frames:
                        break
                    with self._lock:
                        self.all_pts[self._i] = frame.pts
                        self._i += 1

            self._index_ready.set()

    def _build_index_dynamic(self):
        with av.open(self.video_path) as container:
            stream = container.streams.video[self.stream_index]
            pts_list = []

            current_index = 0
            flush_every = 10  # number of frames over which flushing to all points
            for packet in container.demux(stream):
                for frame in packet.decode():
                    if frame.pts is not None:
                        pts_list.append(frame.pts)
                        if current_index % flush_every == 0:
                            with self._lock:
                                self.all_pts = pts_list
                                self._i = current_index
                        current_index += 1

            self._index_ready.set()


    def seek(self, pts_keyframe):
        """Find the nearest keypoint frame``.

        This function navigates to the nearest keypoint frame ``pts_keyframe`` and
        defines an iterator for streaming from the keypoint onwards.
        Each frame must be decoded in sequence from the keypoint.
        """
        # calculate the number of points
        self.container.seek(int(pts_keyframe), backward=True, any_frame=False, stream=self.stream)
        self.packet_iter = self.container.demux(self.stream)


    def get(self, ts: float) -> av.VideoFrame:
        idx = ts_to_index(ts, self.time)

        if idx == self.last_idx:
            return self.current_frame

        # Wait until enough index is available
        # Estimate pts from index (using filled index if available)
        if self._i > idx:
            # the pts for this timestamp has been filled
            with self._lock:
                target_pts = self.all_pts[idx]
            use_time = False
        else:
            # keep going until at least two frames have been decoded by the thread
            while True:
                with self._lock:
                    if self._i > 1:
                        break
                time.sleep(0.001)
            # use recent history to get the step estimate
            with self._lock:
                # Linear extrapolation from available pts (use last 10 steps for an estimate)
                start, stop = max(self._i - 10, 0), self._i
                avg_step = np.mean(np.diff(self.all_pts[start:stop]))
                target_pts = int(self.all_pts[-1] + avg_step * (idx - (self._i - 1)))
                use_time = True

        self.seek(target_pts)

        # Decode forward from the keypoint until the frame just before (or equal to) target_pts
        preceding_frame = None
        for packet in self.packet_iter:
            for frame in packet.decode():
                if frame.pts is None:
                    continue
                if (not use_time and frame.pts > target_pts) or (use_time and frame.time > self.round_fn(float(idx / self.stream.base_rate))):
                    self.last_idx = idx
                    self.current_frame = preceding_frame or frame
                    return self.current_frame
                preceding_frame = frame

        self.last_idx = idx
        self.current_frame = preceding_frame
        return preceding_frame
